  CinderVolumes.create_and_delete_snapshot:
    -
      args:
        force: false
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          {{ unlimited_volumes() }}
        api_versions:
          {{ volume_service(version=volume_version, service_type=volume_service_type) }}
        {{ volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumes.create_and_delete_volume:
    -
      args:
        size:
          max: 1
          min: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          {{ unlimited_volumes() }}
        api_versions:
          {{ volume_service(version=volume_version, service_type=volume_service_type) }}
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}
    -
      args:
        {{ vm_params(image_name,none,1) }}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          {{ unlimited_volumes() }}
        api_versions:
          {{ volume_service(version=volume_version, service_type=volume_service_type) }}
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}
    -
      args:
        size: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          {{ unlimited_volumes() }}
        api_versions:
          {{ volume_service(version=volume_version, service_type=volume_service_type) }}
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumes.create_and_extend_volume:
    -
      args:
        new_size: 2
        size: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          {{ unlimited_volumes() }}
        api_versions:
          {{ volume_service(version=volume_version, service_type=volume_service_type) }}
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumes.create_from_volume_and_delete_volume:
    -
      args:
        size: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          {{ unlimited_volumes() }}
        api_versions:
          {{ volume_service(version=volume_version, service_type=volume_service_type) }}
        {{ volumes() }}
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  CinderQos.create_and_list_qos:
    -
      args:
        consumer: "both"
        write_iops_sec: "10"
        read_iops_sec: "1000"
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
        api_versions:
          {{ volume_service(version=volume_version, service_type=volume_service_type) }}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  CinderQos.create_and_set_qos:
    -
      args:
        consumer: "back-end"
        write_iops_sec: "10"
        read_iops_sec: "1000"
        set_consumer: "both"
        set_write_iops_sec: "11"
        set_read_iops_sec: "1001"
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
        api_versions:
          {{ volume_service(version=volume_version, service_type=volume_service_type) }}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumeTypes.create_and_list_volume_types:
    -
      args:
        description: "rally tests creating types"
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
        api_versions:
          {{ volume_service(version=volume_version, service_type=volume_service_type) }}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  CinderVolumeTypes.create_volume_type_and_encryption_type:
    -
      args:
        description: "rally tests creating types"
        provider: "LuksEncryptor"
        cipher: "aes-xts-plain64"
        key_size: 512
        control_location: "front-end"
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
        api_versions:
          {{ volume_service(version=volume_version, service_type=volume_service_type) }}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}
