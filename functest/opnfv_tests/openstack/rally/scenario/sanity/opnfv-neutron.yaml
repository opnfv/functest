  NeutronNetworks.create_and_delete_networks:
    -
      args:
        network_create_args: {}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_delete_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        network: {}
        quotas:
          neutron:
            network: -1
            port: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_delete_routers:
    -
      args:
        network_create_args: {}
        router_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnet_create_args: {}
        subnets_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        network: {}
        quotas:
          neutron:
            network: -1
            subnet: -1
            port: -1
            router: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_delete_subnets:
    -
      args:
        network_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnet_create_args: {}
        subnets_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        network: {}
        quotas:
          neutron:
            network: -1
            subnet: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_list_networks:
    -
      args:
        network_create_args: {}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        quotas:
          neutron:
            network: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_list_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        network: {}
        quotas:
          neutron:
            network: -1
            port: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_list_routers:
    -
      args:
        network_create_args: {}
        router_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnet_create_args: {}
        subnets_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        network: {}
        quotas:
          neutron:
            network: -1
            subnet: -1
            router: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}

  NeutronNetworks.create_and_list_subnets:
    -
      args:
        network_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnet_create_args: {}
        subnets_per_network: 1
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        network: {}
        quotas:
          neutron:
            network: -1
            subnet: -1
        {% endcall %}
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      sla:
        {{ no_failures_sla() }}
