  CeilometerMeters.list_meters:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        ceilometer:
          counter_name: "benchmark_meter"
          counter_type: "gauge"
          counter_unit: "%"
          counter_volume: 100
          resources_per_tenant: 100
          samples_per_resource: 100
          timestamp_interval: 10
          metadata_list:
            -
              status: "active"
              name: "rally benchmark on"
              deleted: "false"
            -
              status: "terminated"
              name: "rally benchmark off"
              deleted: "true"
        {% endcall %}
      args:
        limit: 50
        metadata_query:
          status: "terminated"
      sla:
        {{ no_failures_sla() }}

  CeilometerResource.list_resources:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        ceilometer:
          counter_name: "benchmark_meter"
          counter_type: "gauge"
          counter_unit: "%"
          counter_volume: 100
          resources_per_tenant: 100
          samples_per_resource: 100
          timestamp_interval: 10
          metadata_list:
            -
              status: "active"
              name: "rally benchmark on"
              deleted: "false"
            -
              status: "terminated"
              name: "rally benchmark off"
              deleted: "true"
        {% endcall %}
      args:
        limit: 50
        metadata_query:
          status: "terminated"
      sla:
        {{ no_failures_sla() }}

  CeilometerAlarms.create_alarm_and_get_history:
    -
      args:
        meter_name: "ram_util"
        threshold: 10.0
        type: "threshold"
        state: "ok"
        statistic: "avg"
        alarm_actions: ["http://localhost:8776/alarm"]
        ok_actions: ["http://localhost:8776/ok"]
        insufficient_data_actions: ["http://localhost:8776/notok"]
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerAlarms.create_and_delete_alarm:
    -
      args:
        meter_name: "ram_util"
        threshold: 10.0
        type: "threshold"
        statistic: "avg"
        alarm_actions: ["http://localhost:8776/alarm"]
        ok_actions: ["http://localhost:8776/ok"]
        insufficient_data_actions: ["http://localhost:8776/notok"]
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerAlarms.create_and_get_alarm:
    -
      args:
        meter_name: "ram_util"
        threshold: 10.0
        type: "threshold"
        statistic: "avg"
        alarm_actions: ["http://localhost:8776/alarm"]
        ok_actions: ["http://localhost:8776/ok"]
        insufficient_data_actions: ["http://localhost:8776/notok"]
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerAlarms.create_and_list_alarm:
    -
      args:
        meter_name: "ram_util"
        threshold: 10.0
        type: "threshold"
        statistic: "avg"
        alarm_actions: ["http://localhost:8776/alarm"]
        ok_actions: ["http://localhost:8776/ok"]
        insufficient_data_actions: ["http://localhost:8776/notok"]
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerQueries.create_and_query_alarm_history:
    -
      args:
        orderby: !!null
        limit: !!null
        meter_name: "ram_util"
        threshold: 10.0
        type: "threshold"
        statistic: "avg"
        alarm_actions: ["http://localhost:8776/alarm"]
        ok_actions: ["http://localhost:8776/ok"]
        insufficient_data_actions: ["http://localhost:8776/notok"]
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerQueries.create_and_query_alarms:
    -
      args:
        filter: {"and": [{"!=": {"state": "dummy_state"}},{"=": {"type": "threshold"}}]}
        orderby: !!null
        limit: 10
        meter_name: "ram_util"
        threshold: 10.0
        type: "threshold"
        statistic: "avg"
        alarm_actions: ["http://localhost:8776/alarm"]
        ok_actions: ["http://localhost:8776/ok"]
        insufficient_data_actions: ["http://localhost:8776/notok"]
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerQueries.create_and_query_samples:
    -
      args:
        filter: {"=": {"counter_unit": "instance"}}
        orderby: !!null
        limit: 10
        counter_name: "cpu_util"
        counter_type: "gauge"
        counter_unit: "instance"
        counter_volume: 1.0
        resource_id: "resource_id"
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerAlarms.create_and_update_alarm:
    -
      args:
        meter_name: "ram_util"
        threshold: 10.0
        type: "threshold"
        statistic: "avg"
        alarm_actions: ["http://localhost:8776/alarm"]
        ok_actions: ["http://localhost:8776/ok"]
        insufficient_data_actions: ["http://localhost:8776/notok"]
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerStats.create_meter_and_get_stats:
    -
      args:
        user_id: "user-id"
        resource_id: "resource-id"
        counter_volume: 1.0
        counter_unit: ""
        counter_type: "cumulative"
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerEvents.create_user_and_get_event:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerEvents.create_user_and_list_events:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerEvents.create_user_and_list_event_types:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerTraits.create_user_and_list_trait_descriptions:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerTraits.create_user_and_list_traits:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerStats.get_stats:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        ceilometer:
          counter_name: "benchmark_meter"
          counter_type: "gauge"
          counter_unit: "%"
          counter_volume: 100
          resources_per_tenant: 100
          samples_per_resource: 100
          timestamp_interval: 10
          metadata_list:
            -
              status: "active"
              name: "rally benchmark on"
              deleted: "false"
            -
              status: "terminated"
              name: "rally benchmark off"
              deleted: "true"
        {% endcall %}
      args:
        meter_name: "benchmark_meter"
        filter_by_user_id: true
        filter_by_project_id: true
        filter_by_resource_id: true
        metadata_query:
          status: "terminated"
        period: 300
        groupby: "resource_id"
      sla:
        {{ no_failures_sla() }}

  CeilometerResource.get_tenant_resources:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        ceilometer:
          counter_name: "cpu_util"
          counter_type: "gauge"
          counter_volume: 1.0
          counter_unit: "instance"
        {% endcall %}
      sla:
        {{ no_failures_sla() }}

  CeilometerAlarms.list_alarms:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {{ user_context(tenants_amount, users_amount, use_existing_users) }}
      sla:
        {{ no_failures_sla() }}

  CeilometerSamples.list_matched_samples:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        ceilometer:
          counter_name: "cpu_util"
          counter_type: "gauge"
          counter_unit: "instance"
          counter_volume: 1.0
          resources_per_tenant: 100
          samples_per_resource: 100
          timestamp_interval: 60
          metadata_list:
            -  status: "active"
               name: "fake_resource"
               deleted: "False"
               created_at: "2015-09-04T12:34:19.000000"
            -  status: "not_active"
               name: "fake_resource_1"
               deleted: "False"
               created_at: "2015-09-10T06:55:12.000000"
        {% endcall %}
      args:
        limit: 50
        filter_by_user_id: true
        filter_by_project_id: true
        filter_by_resource_id: true
        metadata_query:
          status: "not_active"
      sla:
        {{ no_failures_sla() }}

  CeilometerMeters.list_matched_meters:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        ceilometer:
          counter_name: "benchmark_meter"
          counter_type: "gauge"
          counter_unit: "%"
          counter_volume: 100
          resources_per_tenant: 100
          samples_per_resource: 100
          timestamp_interval: 10
          metadata_list:
            -
              status: "active"
              name: "rally benchmark on"
              deleted: "false"
            -
              status: "terminated"
              name: "rally benchmark off"
              deleted: "true"
        {% endcall %}
      args:
        limit: 50
        filter_by_user_id: true
        filter_by_project_id: true
        filter_by_resource_id: true
        metadata_query:
          status: "terminated"
      sla:
        {{ no_failures_sla() }}

  CeilometerResource.list_matched_resources:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        ceilometer:
          counter_name: "benchmark_meter"
          counter_type: "gauge"
          counter_unit: "%"
          counter_volume: 100
          resources_per_tenant: 100
          samples_per_resource: 100
          timestamp_interval: 10
          metadata_list:
            -
              status: "active"
              name: "rally benchmark on"
              deleted: "false"
            -
              status: "terminated"
              name: "rally benchmark off"
              deleted: "true"
        {% endcall %}
      args:
        limit: 50
        filter_by_user_id: true
        filter_by_project_id: true
        metadata_query:
          status: "terminated"
      sla:
        {{ no_failures_sla() }}

  CeilometerSamples.list_samples:
    -
      runner:
        {{ constant_runner(concurrency=concurrency, times=iterations, is_smoke=smoke) }}
      context:
        {% call user_context(tenants_amount, users_amount, use_existing_users) %}
        ceilometer:
          counter_name: "cpu_util"
          counter_type: "gauge"
          counter_unit: "instance"
          counter_volume: 1.0
          resources_per_tenant: 100
          samples_per_resource: 100
          timestamp_interval: 60
          metadata_list:
            -  status: "active"
               name: "fake_resource"
               deleted: "False"
               created_at: "2015-09-04T12:34:19.000000"
            -  status: "not_active"
               name: "fake_resource_1"
               deleted: "False"
               created_at: "2015-09-10T06:55:12.000000"
          batch_size: 5
        {% endcall %}
      args:
        limit: 50
        metadata_query:
          status: "not_active"
      sla:
        {{ no_failures_sla() }}

