{
  "comments": [
    {
      "key": {
        "uuid": "da33351e_ea6c1639",
        "filename": "functest/api/actions/api_env.py",
        "patchSetId": 24
      },
      "lineNbr": 12,
      "author": {
        "id": 3405
      },
      "writtenOn": "2017-08-02T17:08:13Z",
      "side": 1,
      "message": "This class seems useless as you don\u0027t redefine anything.",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_0daa3470",
        "filename": "functest/api/actions/api_env.py",
        "patchSetId": 24
      },
      "lineNbr": 12,
      "author": {
        "id": 5441
      },
      "writtenOn": "2017-08-03T03:10:01Z",
      "side": 1,
      "message": "Yes, now I think it is better to call the module cli_env directly, without inheriting from Env.\nBut I have to consider moving the superclasses in the dir cli/commands to another separate dir, then cli and api can import the module it them direatly, and also avoid mixing api and cli.",
      "parentUuid": "da33351e_ea6c1639",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_ca695227",
        "filename": "functest/api/actions/api_os.py",
        "patchSetId": 24
      },
      "lineNbr": 12,
      "author": {
        "id": 3405
      },
      "writtenOn": "2017-08-02T17:08:13Z",
      "side": 1,
      "message": "idem",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_2a771e04",
        "filename": "functest/api/actions/api_testcase.py",
        "patchSetId": 24
      },
      "lineNbr": 12,
      "author": {
        "id": 3405
      },
      "writtenOn": "2017-08-02T17:08:13Z",
      "side": 1,
      "message": "idem",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_0a74dafb",
        "filename": "functest/api/actions/api_tier.py",
        "patchSetId": 24
      },
      "lineNbr": 12,
      "author": {
        "id": 3405
      },
      "writtenOn": "2017-08-02T17:08:13Z",
      "side": 1,
      "message": "idem",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_6a600636",
        "filename": "functest/api/base.py",
        "patchSetId": 24
      },
      "lineNbr": 47,
      "author": {
        "id": 3405
      },
      "writtenOn": "2017-08-02T17:08:13Z",
      "side": 1,
      "message": "This is a \"private\" method. Does pylint warn about missing docstring here?",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_4dbb9cc4",
        "filename": "functest/api/base.py",
        "patchSetId": 24
      },
      "lineNbr": 47,
      "author": {
        "id": 5441
      },
      "writtenOn": "2017-08-03T03:10:01Z",
      "side": 1,
      "message": "Yes, it also warned that Missing method docstring (missing-docstring) without \"# pylint: disable\u003dmissing-docstring\"",
      "parentUuid": "da33351e_6a600636",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_ad6d0807",
        "filename": "functest/api/common/error.py",
        "patchSetId": 24
      },
      "lineNbr": 18,
      "author": {
        "id": 5441
      },
      "writtenOn": "2017-08-03T06:47:25Z",
      "side": 1,
      "message": "I plan to remove def result_handler out of this file later, cause it is not only used as exception, but also return 0 when  \ntestcase/tier has been run successfully.",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 18,
        "endChar": 18
      },
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_5631720a",
        "filename": "functest/api/common/error.py",
        "patchSetId": 24
      },
      "lineNbr": 25,
      "author": {
        "id": 2651
      },
      "writtenOn": "2017-08-02T11:15:01Z",
      "side": 1,
      "message": "I would suggest keeping all the exception models/processes the same.",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_04b9782e",
        "filename": "functest/api/resources/v1/creds.py",
        "patchSetId": 24
      },
      "lineNbr": 21,
      "author": {
        "id": 5959
      },
      "writtenOn": "2017-08-02T09:47:23Z",
      "side": 1,
      "message": "As the v1 is demonstrated in the module path, is the V1 string still needed in the class name?",
      "range": {
        "startLine": 21,
        "startChar": 6,
        "endLine": 21,
        "endChar": 13
      },
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_b6fefe36",
        "filename": "functest/api/resources/v1/creds.py",
        "patchSetId": 24
      },
      "lineNbr": 21,
      "author": {
        "id": 5441
      },
      "writtenOn": "2017-08-02T10:48:59Z",
      "side": 1,
      "message": "Yes, all the classes inherited from ApiResource are all loaded dynamically via def import_modules_from_package, where the dir name v1/v2 is not recognized, and only class name is used as the unique name to obtain resource.",
      "parentUuid": "da33351e_04b9782e",
      "range": {
        "startLine": 21,
        "startChar": 6,
        "endLine": 21,
        "endChar": 13
      },
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_d62462c8",
        "filename": "functest/api/resources/v1/testcases.py",
        "patchSetId": 24
      },
      "lineNbr": 37,
      "author": {
        "id": 2651
      },
      "writtenOn": "2017-08-02T11:15:01Z",
      "side": 1,
      "message": "with regards to exceptions, I would suggest utilizing \u0027abort()\u0027 function, in case of multi-nest functions. abort is integrated with flask and acts like raise, the whole process will exit and return to the client right away.",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_cd732ce6",
        "filename": "functest/api/resources/v1/testcases.py",
        "patchSetId": 24
      },
      "lineNbr": 37,
      "author": {
        "id": 5441
      },
      "writtenOn": "2017-08-03T06:47:25Z",
      "side": 1,
      "message": "I have tried \"abort\" locally, but it is not so user-friendly, cause if testcase_name is spelt wrong here, it will raise exception, but the detailed and accurate info can not be shown  within \"abort\". \nWith that, I prefer to give the message like this: \"The test case \u0027%s\u0027 does not exist or is not supported\", which is simple and obvious.",
      "parentUuid": "da33351e_d62462c8",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_8a5f4a72",
        "filename": "functest/api/server.py",
        "patchSetId": 24
      },
      "lineNbr": 65,
      "author": {
        "id": 3405
      },
      "writtenOn": "2017-08-02T17:08:13Z",
      "side": 1,
      "message": "5000 could be defined in config",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_6db660de",
        "filename": "functest/api/server.py",
        "patchSetId": 24
      },
      "lineNbr": 65,
      "author": {
        "id": 5441
      },
      "writtenOn": "2017-08-03T03:10:01Z",
      "side": 1,
      "message": "Actually here 5000 can be omitted, cause 5000 is listened by dafault. \nI am fine with it when it is set in config_functest.yaml.",
      "parentUuid": "da33351e_8a5f4a72",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_44e9c019",
        "filename": "functest/cli/commands/cli_testcase.py",
        "patchSetId": 24
      },
      "lineNbr": 23,
      "author": {
        "id": 5959
      },
      "writtenOn": "2017-08-02T09:47:23Z",
      "side": 1,
      "message": "I would suggest to put the refactored classes into a separate folder as it is not only used by CLI but also by API.\nIt does not make much sense to have it under \nfunctest.cli.commands\n\nThis applies to other refactored classes",
      "range": {
        "startLine": 23,
        "startChar": 6,
        "endLine": 23,
        "endChar": 14
      },
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_36c14ee5",
        "filename": "functest/cli/commands/cli_testcase.py",
        "patchSetId": 24
      },
      "lineNbr": 23,
      "author": {
        "id": 5441
      },
      "writtenOn": "2017-08-02T10:48:59Z",
      "side": 1,
      "message": "Thanks, Helen. You are right. We have already realized this matter.\nBut we all have come to an agreement that separating CLI and API totally in a later patch, which will avoid making the patch large.",
      "parentUuid": "da33351e_44e9c019",
      "range": {
        "startLine": 23,
        "startChar": 6,
        "endLine": 23,
        "endChar": 14
      },
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_0d7eb4ae",
        "filename": "functest/cli/commands/cli_testcase.py",
        "patchSetId": 24
      },
      "lineNbr": 23,
      "author": {
        "id": 5441
      },
      "writtenOn": "2017-08-03T06:50:49Z",
      "side": 1,
      "message": "Helen, do you have any suggestions about naming a new dir to hold all the refectored classes?",
      "parentUuid": "da33351e_44e9c019",
      "range": {
        "startLine": 23,
        "startChar": 6,
        "endLine": 23,
        "endChar": 14
      },
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_ea53766a",
        "filename": "requirements.txt",
        "patchSetId": 24
      },
      "lineNbr": 24,
      "author": {
        "id": 3405
      },
      "writtenOn": "2017-08-02T17:08:13Z",
      "side": 1,
      "message": "Flask!\u003d0.11,\u003c1.0,\u003e\u003d0.10 # BSD\nFlask-RESTful\u003e\u003d0.3.5 # BSD",
      "revId": "e1cf91b68cc49d3a919fcd212e1f301e4bee086f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}